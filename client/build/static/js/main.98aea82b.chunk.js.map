{"version":3,"sources":["img/logo.jpeg","components/About/Navbar.js","util/index.js","components/About/About.js","components/SignUp/useForm.js","components/SignUp/SignUPFormValidation.js","url/config.js","components/NetworkError.js","fetch/index.js","components/SignUp/SignUp.js","components/Login/Login.js","components/Navbar/Navbar.js","components/Decks/Decks.js","components/Add/AddCard.js","components/Add/Add.js","components/Decks/Question.js","components/Decks/Answer.js","components/Decks/Deck.js","components/Edit/Edit.js","components/NotFound.js","components/Routes.js","index.js"],"names":["module","exports","__webpack_require__","p","StyledNav","styled","nav","_templateObject","StyledLink","Link","_templateObject2","LogoName","label","_templateObject3","Logo","img","_templateObject4","BtnGroup","aside","_templateObject5","Button","_templateObject6","media","greaterThan","_templateObject7","Navbar","_ref","signup","login","react_default","a","createElement","to","src","logo","alt","getSession","JSON","parse","window","localStorage","getItem","setSession","value","setItem","stringify","StyledSection","section","About_templateObject","StyledPara2","About_templateObject2","StyledPara1","About_templateObject3","Home","active","session","Fragment","react_router","className","About_Navbar","useForm","callback","validate","_useState","useState","_useState2","Object","slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","isSubmitting","setIsSubmitting","useEffect","keys","length","handleChange","event","persist","objectSpread2","defineProperty","target","name","handleSubmit","e","preventDefault","user_name","test","user_email","pswd","url","NetworkError","Heading","NetworkError_templateObject","fetchPost","response","regenerator_default","async","_context","prev","next","awrap","fetch","method","body","headers","Content-Type","sent","abrupt","t0","err","stop","fetchGet","_context2","SignUp","status","setStatus","resMsg","setResMsg","userAcc","setAcc","_useState7","_useState8","netErr","setNetErr","_useForm","fetchReq","concat","toConsumableArray","card","responseMsg","json","ok","components_NetworkError","onSubmit","htmlFor","type","placeholder","id","onChange","minLength","error","success","Login","isLogin","setIsLogin","_useState9","_useState10","errMsg","setErrMsg","_useState11","_useState12","result","sid","res","required","Navbar_templateObject","Navbar_templateObject2","LogoText","Navbar_templateObject3","account","setAccount","data","user","accountName","Navbar_StyledNav","role","aria-label","react_router_dom","Navbar_Logo","onClick","Decks","decks","setDecks","isClick","setIsClick","path","setPath","isAction","setAction","deckNames","components_Navbar_Navbar","map","item","key","deck","innerText","toLowerCase","deckClickTime","parseInt","Date","now","handleDeck","toUpperCase","deckName","reName","prompt","handleRename","confirm","AddCard","editQuestion","editDeck","editAns","saveBtn","updateBtn","heading","editCard","onNetErr","converter","showdown","Converter","makeHtml","makeMarkdown","question","answer","isSubmit","setIssubmit","isUpdate","setIsUpdate","cards","setCards","setQuestion","setAnswer","setDeck","_useState13","_useState14","decksOpt","setDecksOpt","setTimeout","Number","again","easy","good","list","autoFocus","handleQuestion","handleAnswer","Add","Add_AddCard","val","handleNetErr","Question","onQuestion","onEdit","handleEdit","Answer","onAgainAns","onEasyOrGood","ConvertSec","n","time","day","push","hour","min","sec","handleEasyOrGood","answerType","timeToDelay","oldStatus","timeStamp","newArr","slice","array","handleAgain","initialState","arr","showStudy","showQuestion","showAnswer","edit","editId","newCards","learningCards","reviewCards","reducer","state","action","console","log","Deck","studyDiv","congratsMsg","_useReducer","useReducer","_useReducer2","dispatch","useParams","handleStudy","res1","res2","filter","reduce","acc","cv","deckclicktime","timestamp","getDataFromDb","Decks_Question","Decks_Answer","Edit","setEditCard","NotFound","NotFound_templateObject","routes","exact","component","About","ReactDOM","render","Routes","document","getElementById"],"mappings":"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","file":"static/js/main.98aea82b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b1ba9550.jpeg\";","import React from 'react'\nimport logo from '../../img/logo.jpeg'\nimport styled from 'styled-components'\nimport media from 'styled-media-query'\nimport { Link } from 'react-router-dom'\n\nconst StyledNav = styled.nav`\ndisplay: flex;\njustify-content: space-between;\nbackground-color: rgb(212, 198, 198);\npadding: 0px 10px 0px 20px;\nmargin-bottom: 40px;\n`\n\nconst StyledLink = styled(Link)`\ndisplay: flex;\ntext-decoration: none;\npadding: 10px;\n`\n\nconst LogoName = styled.label`\nfont-weight: bold;\nfont-size: 20px;\nalign-self: center;\ncolor: rgb(20, 20, 90);\ntext-shadow: 3px 3px 3px rgb(201, 129, 129);\n`\n\nconst Logo = styled.img`\n  height: 40px;\n  width: auto;\n  border-radius: 50%;\n`\n\nconst BtnGroup = styled.aside`\n  display: flex;\n  align-self: center;\n`\n\nconst Button = styled(Link)`\npadding: 6px;\ntext-transform: capitalize;\nfont-weight: bold;\n&:hover {\n  color: rgb(36, 73, 36);\nbackground-color: rgb(134, 134, 184);\nbox-shadow: 5px 5px 2px green;\n}\n${media.greaterThan('425px')`\ntext-decoration: none;\nbackground-color: rgb(20, 20, 90);\ncolor: rgb(235, 228, 228);\nborder-radius: 6px;\nbox-shadow: 5px 5px 2px rgb(179, 125, 125);\ntext-align: center;\nmargin: 0px 20px 0px 0px;\n`}\n`\n\nfunction Navbar ({ signup, login }) {\n  return (\n    <StyledNav>\n      <StyledLink to='/'>\n        <LogoName>SpaceRep</LogoName>\n        <Logo src={logo} alt='logo' />\n      </StyledLink>\n      <BtnGroup>\n        {signup && <Button to='/signup'>{signup} </Button>}\n        {login && <Button to='/login'> {login}</Button>}\n      </BtnGroup>\n    </StyledNav>\n  )\n}\n\nexport default Navbar\n","const name = 'session'\nexport const getSession = () => {\n  const session = JSON.parse(window.localStorage.getItem(name))\n  return session\n}\n\nexport const setSession = (value) => {\n  window.localStorage.setItem('session', JSON.stringify(value))\n}\n","import React from 'react'\nimport Navbar from './Navbar'\nimport styled from 'styled-components'\nimport { Redirect } from 'react-router-dom'\nimport { getSession } from '../../util'\n\nconst StyledSection = styled.section`\nmargin:10px 100px 0px 100px;\n`\n\nconst StyledPara2 = styled.p`\nfont-size: 18px;\nline-height: 1.5;\n`\nconst StyledPara1 = styled(StyledPara2)`\n    margin-bottom: 10px;\n`\n\nfunction Home () {\n  let active\n  const session = getSession()\n  if (session) {\n    active = session.active\n  }\n  return (\n    <>\n      {active && <Redirect to='/decks' />}\n      <main className='main'>\n        <Navbar signup='signUp' login='logIn' />\n        <StyledSection>\n          <StyledPara1>\n            SpaceRep is a free companion to the computer version of Anki. It can\n            be used to review online when you don't have access to your home\n            computer, and can be used to keep your cards synchronized across\n            multiple machines.\n          </StyledPara1>\n          <StyledPara2>\n            SpaceRep is intended to be used in conjunction with the computer\n            version of Anki. While it is possible to create basic text-only\n            cards and review them using only SpaceRep.\n          </StyledPara2>\n        </StyledSection>\n      </main>\n    </>\n  )\n}\n\nexport default Home\n","import { useState, useEffect } from 'react'\n\nfunction useForm (callback, validate) {\n  const [values, setValues] = useState({})\n  const [errors, setErrors] = useState({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback()\n    }\n  }, [errors])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setErrors(validate(values))\n  }\n\n  const handleChange = (event) => {\n    event.persist()\n    setValues(values => ({\n      ...values,\n      [event.target.name]: event.target.value\n    }))\n  }\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  }\n}\n\nexport default useForm\n","export default function validate (values) {\n  const errors = {}\n  if (!values.user_name) errors.user_name = 'User name is required'\n  if (!/^[a-z0-9A-Z ]+$/.test(values.user_name)) errors.user_name = 'User Name is Invalid'\n  if (!values.user_email) errors.user_email = 'User Email is required'\n  else if (!/\\S+@\\S+\\.\\S+/.test(values.user_email)) {\n    errors.user_email = 'Email address is invalid'\n  }\n  if (!values.pswd) errors.pswd = 'Password is required'\n  return errors\n}\n","\nconst url = 'http://localhost:3000'\nexport default url\n","import React from 'react'\nimport styled from 'styled-components'\n\nfunction NetworkError () {\n  const Heading = styled.p`\n    text-align: center;\n    margin-top: 80px;\n    font-size: 30px\n    `\n  return (\n    <main>\n      <Heading>Server is down. Please try again later</Heading>\n    </main>\n  )\n}\n\nexport default NetworkError\n","export async function fetchPost (url, value) {\n  try {\n    const response = await window.fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(value),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    return response\n  } catch {\n    return { err: 'error' }\n  }\n}\n\nexport async function fetchGet (url) {\n  try {\n    const response = await window.fetch(url)\n    return response\n  } catch {\n    return { err: 'error' }\n  }\n}\n","import React, { useState } from 'react'\nimport './signUp.css'\nimport useForm from './useForm'\nimport validate from './SignUPFormValidation'\nimport Navbar from '../About/Navbar'\nimport url from '../../url/config'\nimport NetworkErr from '../NetworkError'\nimport { Redirect } from 'react-router-dom'\nimport { fetchPost } from '../../fetch'\n\nfunction SignUp () {\n  const [status, setStatus] = useState('')\n  const [resMsg, setResMsg] = useState({})\n  const [userAcc, setAcc] = useState([])\n  const [netErr, setNetErr] = useState(false)\n  const { handleChange, handleSubmit, values, errors } = useForm(\n    login,\n    validate\n  )\n\n  const fetchReq = async (url, card) => {\n    const response = await fetchPost(url, card)\n    if (response.err) {\n      setNetErr(true)\n    } else {\n      const responseMsg = await response.json()\n      setStatus(response.ok)\n      setResMsg(responseMsg)\n    }\n  }\n\n  function login () {\n    fetchReq(`${url}/createAccount`, values)\n    setAcc([...userAcc, values])\n  }\n\n  return (\n    <>\n      {netErr &&\n        <NetworkErr />}\n      {!netErr &&\n        <div className='signup-page'>\n          <Navbar login='logIn' />\n          <section className='signup-box'>\n            <h1 className='heading'>Create a new account</h1>\n            <p className='sub-heading'>It's free and always will be.</p>\n            <form className='signup-form' onSubmit={e => handleSubmit(e)}>\n              <label htmlFor='username' className='label'>Username</label>\n              <input\n                type='text'\n                placeholder='Enter your name'\n                id='username'\n                name='user_name'\n                className={`input${errors.user_name && 'invalid'}`}\n                onChange={e => handleChange(e)}\n                value={values.user_name || ''}\n              />\n              {errors.user_name && (\n                <p className='invalid-para'>{errors.user_name}</p>\n              )}\n              <label htmlFor='email' className='label'>\n            Your Email\n              </label>\n              <input\n                type='email'\n                placeholder='Enter your Email'\n                id='email'\n                name='user_email'\n                className={`input${errors.user_email && 'invalid'}`}\n                onChange={e => handleChange(e)}\n                value={values.user_email || ''}\n              />\n              {errors.user_email && (\n                <p className='invalid-para'>{errors.user_email}</p>\n              )}\n              <label htmlFor='pswd' className='label'>\n            New Password\n              </label>\n              <input\n                type='password'\n                id='pswd'\n                name='pswd'\n                className={`input${errors.pswd && 'invalid'}`}\n                placeholder='Enter the password'\n                onChange={e => handleChange(e)}\n                value={values.pswd || ''}\n                minLength='6'\n              />\n              {errors.pswd && <p className='invalid-para'>{errors.pswd}</p>}\n              <button className='signup-btn'>Sign Up </button>\n            </form>\n            {status && resMsg.error && (\n              <p className='acc-exist-already'>\n            Sorry, an account with this email address already exists.\n              </p>\n            )}\n            {status && resMsg.success && (\n              <Redirect to='/login' />\n            )}\n          </section>\n        </div>}\n    </>\n  )\n}\n\nexport default SignUp\n","import React, { useState, useEffect } from 'react'\nimport './login.css'\nimport { Redirect } from 'react-router-dom'\nimport Navbar from '../About/Navbar'\nimport url from '../../url/config'\nimport { getSession, setSession } from '../../util'\nimport { fetchPost } from '../../fetch'\nimport NetworkErr from '../NetworkError'\n\nfunction Login () {\n  let active\n  const session = getSession()\n  if (session) {\n    active = session.active\n  }\n\n  const [values, setValues] = useState({})\n  const [errors, setErrors] = useState({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isLogin, setIsLogin] = useState(false)\n  const [errMsg, setErrMsg] = useState({})\n  const [netErr, setNetErr] = useState(false)\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      fetchReq(`${url}/login`, values)\n    }\n  }, [errors])\n\n  const fetchReq = async (url, card) => {\n    const response = await fetchPost(url, card)\n    if (response.err) {\n      setNetErr(true)\n    } else {\n      const result = await response.json()\n      if (result.sid) {\n        setSession(result)\n        setIsLogin(true)\n      } else {\n        setErrMsg(result)\n      }\n    }\n  }\n\n  const handleChange = e => {\n    e.persist()\n    setValues(values => ({ ...values, [e.target.name]: e.target.value }))\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    setIsSubmitting(true)\n    setErrors(validate(values))\n  }\n\n  const validate = values => {\n    const errors = {}\n    if (!/\\S+@\\S+\\.\\S+/.test(values.user_email)) {\n      errors.user_email = 'Email address is invalid'\n    }\n    if (!values.user_email) {\n      errors.user_email = 'User Email is required'\n    }\n    if (!values.pswd) errors.pswd = 'Password is required'\n    return errors\n  }\n\n  return (\n    <>\n      {netErr && <NetworkErr />}\n      {active && <Redirect to='/decks' />}\n      {!netErr &&\n        <>\n          <Navbar signup='signUp' />\n          <section className='login-box'>\n            <h1 className='heading'>Login</h1>\n            <p className='sub-heading'>Log in to an existing account.</p>\n            {errMsg &&\n              <p className='acc-not-exist-msg'> {errMsg.res}\n              </p>}\n            <form className='login-form' onSubmit={e => handleSubmit(e)}>\n              <label htmlFor='email' className='label'>Email</label>\n              <input\n                type='email' placeholder='Enter your Email'\n                id='email' name='user_email' className={`input${errors.user_email && 'invalid'}`}\n                onChange={(e) => handleChange(e)}\n                value={values.user_email || ''}\n                required\n              />\n              {errors.user_email && (\n                <p className='invalid-para'>{errors.user_email}</p>\n              )}\n              <label htmlFor='pswd' className='label'>Password</label>\n              <input\n                type='password' id='pswd' name='pswd'\n                className={`input${errors.pswd && 'invalid'}`} placeholder='Enter the password'\n                onChange={(e) => handleChange(e)}\n                value={values.pswd || ''}\n                required\n              />\n              {errors.pswd && (\n                <p className='invalid-para'>{errors.pswd}</p>\n              )}\n              <button className='login-btn'>Login</button>\n              {isLogin &&\n                <Redirect to='/decks' />}\n            </form>\n          </section>\n        </>}\n    </>\n  )\n}\n\nexport default Login\n","import React, { useState, useEffect } from 'react'\nimport 'bulma/css/bulma.css'\nimport logo from '../../img/logo.jpeg'\nimport { Link } from 'react-router-dom'\nimport url from '../../url/config'\nimport { getSession } from '../../util'\nimport { fetchGet } from '../../fetch'\nimport NetworkErr from '../NetworkError'\nimport styled from 'styled-components'\n\nconst StyledNav = styled.nav`\nbackground-color: rgb(212, 198, 198);\n  text-decoration: none;\n  color: rgb(20, 20, 90);\n  font-weight: bold;\n  font-size: 17px;\n  padding: 10px;\n`\nconst Logo = styled.img`\n  border-radius: 50%;\n`\nconst LogoText = styled.label`\ncolor: rgb(20, 20, 90);\n  text-shadow: 3px 3px 3px rgb(201, 129, 129);\n`\n\nfunction Navbar () {\n  let sid\n  const session = getSession()\n  if (session) sid = session.sid\n  const [account, setAccount] = useState('')\n  const [netErr, setNetErr] = useState(false)\n\n  async function accountName () {\n    const response = await fetchGet(`${url}/checkAccount/?sid=${session.sid}`)\n    if (response.err) {\n      setNetErr(true)\n    } else {\n      const data = await response.json()\n      if (data.user) setAccount(data.user)\n    }\n  }\n\n  useEffect(() => {\n    accountName()\n  }, [])\n\n  const handleLogOut = async () => {\n    const response = await window.fetch(`${url}/logout/?sid=${sid}`)\n    const result = await response.json()\n    window.localStorage.setItem('session', JSON.stringify(result))\n  }\n\n  return (\n    <>\n      {netErr && <NetworkErr />}\n      {!netErr &&\n        <StyledNav className='navbar' role='navigation' aria-label='main navigation'>\n          <div className='navbar-brand'>\n            <Link className='navbar-item' to='/decks'>\n              <Logo src={logo} alt='logo' />\n              <LogoText className='logo-text'>SpaceRep</LogoText>\n            </Link>\n          </div>\n\n          <div className='navbar-menu is-active'>\n            <div className='navbar-start'>\n              <Link className='navbar-item' to='/decks'> Decks</Link>\n              <Link className='navbar-item' to='/add'> Add</Link>\n            </div>\n\n            <div className='navbar-end'>\n              <Link className='navbar-item' to='/decks'>Account- {account}</Link>\n              <Link className='navbar-item' to='/login' onClick={handleLogOut}>  Log Out</Link>\n            </div>\n          </div>\n        </StyledNav>}\n    </>\n  )\n}\n\nexport default Navbar\n","import React, { useState, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport NavBar from '../Navbar/Navbar'\nimport './style.css'\nimport url from '../../url/config'\nimport { getSession } from '../../util'\nimport { fetchPost, fetchGet } from '../../fetch'\nimport NetworkErr from '../NetworkError'\n\nfunction Decks () {\n  const session = getSession()\n  let sid, active\n  if (session) {\n    sid = session.sid\n    active = session.active\n  }\n\n  const [decks, setDecks] = useState([])\n  const [isClick, setIsClick] = useState(false)\n  const [path, setPath] = useState('')\n  const [isAction, setAction] = useState(false)\n  const [netErr, setNetErr] = useState(false)\n\n  const deckNames = async () => {\n    const response = await fetchGet(`${url}/getDeckNames/?sid=${sid}`)\n    if (response.err) {\n      setNetErr(true)\n    } else {\n      const data = await response.json()\n      setDecks(data)\n      setAction(false)\n    }\n  }\n\n  useEffect(() => {\n    deckNames()\n  }, [isAction])\n\n  const fetchReq = async (url, card, data) => {\n    const response = await fetchPost(url, card)\n    if (data && response.ok) {\n      setIsClick(true)\n    }\n    if (!data && response.ok) {\n      setAction(true)\n    }\n    if (response.err) {\n      setNetErr(true)\n    }\n  }\n\n  function handleDeck (e) {\n    const deck = e.target.innerText.toLowerCase()\n    setPath(deck)\n    const deckClickTime = parseInt(Date.now() / 1000)\n    fetchReq(`${url}/updateDeckClickTime`, { deck, deckClickTime, sid }, 'deck')\n  }\n\n  function handleRename (deckName) {\n    const reName = window.prompt('Enter New Name')\n    if (reName) {\n      fetchReq(`${url}/modifyDeckName`, { reName, deckName, sid })\n    }\n  }\n\n  function handleDeleteDeck (deckName) {\n    const result = window.confirm('Are You Sure to Delete? This Can\\'t be undone.')\n    if (result) {\n      fetchReq(`${url}/deleteDeck`, { deckName, sid })\n    }\n  }\n\n  return (\n    <>\n      {netErr && <NetworkErr />}\n\n      {!active &&\n        <Redirect to='/' />}\n      {!netErr &&\n        <main>\n          <NavBar />\n          <section className='decks'>\n            <h1 className='decks-heading'>Decks</h1>\n            <ul>\n              {decks.map(item => {\n                return (\n                  <li key={item.id} className='list'>\n                    <label\n                      onClick={(e) => handleDeck(e)} className='deck'\n                    >\n                      {item.deck.toUpperCase()}\n                    </label>\n                    <div className='dropdown-box'>\n                      <label className='dropdown-btn'>ACTION</label>\n                      <div className='dropdown-content'>\n                        <label onClick={() => handleRename(item.deck)}>Rename</label>\n                        <label onClick={() => handleDeleteDeck(item.deck)}>Delete</label>\n                      </div>\n                    </div>\n                    {isClick && <Redirect to={`/decks/${path}`} />}\n                  </li>\n                )\n              })}\n            </ul>\n          </section>\n        </main>}\n    </>\n  )\n}\n\nexport default Decks\n","import React, { useState, useEffect } from 'react'\nimport './addcard.css'\nimport showdown from 'showdown'\nimport url from '../../url/config'\nimport { Redirect } from 'react-router-dom'\nimport { getSession } from '../../util'\nimport { fetchPost } from '../../fetch'\n\nfunction AddCard ({ heading, id, editCard, onNetErr }) {\n  const converter = new showdown.Converter()\n  let editQuestion, editDeck, editAns, saveBtn, updateBtn\n  const sid = getSession().sid\n\n  const makeHtml = value => {\n    const html = converter.makeHtml(value)\n    return html\n  }\n\n  const makeMarkdown = value => {\n    const markDown = converter.makeMarkdown(value)\n    return markDown\n  }\n\n  if (id) {\n    editDeck = editCard[0].deck\n    editQuestion = makeMarkdown(editCard[0].question)\n    editAns = makeMarkdown(editCard[0].answer)\n    updateBtn = <button className='save-btn'>Update</button>\n  } else {\n    saveBtn = <button className='save-btn'>Save</button>\n  }\n\n  const [isSubmit, setIssubmit] = useState(false)\n  const [isUpdate, setIsUpdate] = useState(false)\n  const [cards, setCards] = useState([])\n  const [question, setQuestion] = useState(editQuestion || '')\n  const [answer, setAnswer] = useState(editAns || '')\n  const [deck, setDeck] = useState(editDeck || '')\n  const [decksOpt, setDecksOpt] = useState([])\n\n  setTimeout(() => setIssubmit(false), 4000)\n\n  const handleDeck = e => {\n    const value = e.target.value\n    setDeck(value)\n  }\n\n  const handleQuestion = e => {\n    const value = e.target.value\n    setQuestion(value)\n  }\n\n  const handleAnswer = e => {\n    const value = e.target.value\n    setAnswer(value)\n  }\n\n  const fetchReq = async (url, card, data) => {\n    const response = await fetchPost(url, card)\n    if (data) {\n      setIsUpdate(response.ok)\n    }\n    if (response.err) {\n      onNetErr(true)\n    }\n  }\n\n  const handleSubmit = e => {\n    if (id) {\n      const card = {\n        id: Number(id),\n        deck: deck.toLowerCase() || editDeck,\n        question: makeHtml(question) || editQuestion,\n        answer: makeHtml(answer) || editAns\n      }\n      fetchReq(`${url}/updateCard`, { ...card, sid }, 'update')\n    } else {\n      const card = {\n        deck: deck.toLowerCase(),\n        question: makeHtml(question),\n        answer: makeHtml(answer),\n        status: 'new',\n        again: 60, // 1min\n        easy: 900, // 15 min\n        good: 86400 // 1 day\n      }\n      fetchReq(`${url}/addCard`, { ...card, sid })\n      setCards([card, ...cards])\n      setAnswer('')\n      setQuestion('')\n      setDeck('')\n    }\n    setIssubmit(true)\n    e.preventDefault()\n  }\n\n  const deckNames = async () => {\n    let data = await window.fetch(`${url}/getDecknames/?sid=${sid}`)\n    data = await data.json()\n    setDecksOpt(data)\n  }\n\n  useEffect(() => {\n    deckNames()\n  }, [isSubmit])\n\n  return (\n    <>\n      <form onSubmit={e => handleSubmit(e)}>\n        <section className='field'>\n          <h1 className='heading'>{heading}</h1>\n          <input\n            className='input-box'\n            type='text'\n            placeholder='Enter the deck'\n            onChange={(e) => handleDeck(e)}\n            value={deck}\n            list='deck-list'\n            required\n            autoFocus\n          />\n          <datalist id='deck-list'>\n            {decksOpt.map(item => {\n              return <option key={item.id}>{item.deck}</option>\n            })}\n          </datalist>\n          <textarea\n            className='qa-box'\n            placeholder='Enter the Question'\n            value={question}\n            onChange={(event) => handleQuestion(event)}\n            required\n          />\n          <textarea\n            className='qa-box'\n            placeholder='Enter the Answer'\n            value={answer}\n            onChange={(event) => handleAnswer(event)}\n            required\n          />\n          {saveBtn || updateBtn}\n          {isSubmit &&\n            <p className='isSubmit-para'>Added Successfully</p>}\n          {isUpdate && <Redirect to='/decks' />}\n        </section>\n      </form>\n    </>\n  )\n}\n\nexport default AddCard\n","import React, { useState } from 'react'\nimport './addcard.css'\nimport NavBar from '../Navbar/Navbar'\nimport AddCard from './AddCard'\nimport { Redirect } from 'react-router-dom'\nimport { getSession } from '../../util'\nimport NetworkErr from '../NetworkError'\n\nfunction Add () {\n  const [netErr, setNetErr] = useState(false)\n  let active\n  const session = getSession()\n\n  if (session) active = session.active\n\n  const handleNetErr = val => setNetErr(val)\n\n  return (\n    <>\n      {netErr && <NetworkErr />}\n      {!active && <Redirect to='/' />}\n      {!netErr &&\n        <main>\n          <NavBar />\n          <AddCard heading='Add Card' onNetErr={val => handleNetErr(val)} />\n        </main>}\n    </>\n  )\n}\n\nexport default Add\n","import React from 'react'\nimport parse from 'html-react-parser'\n\nfunction Question ({ question, id, onQuestion, onEdit }) {\n  function handleQuestion () {\n    onQuestion()\n  }\n\n  function handleEdit (id) {\n    onEdit(id)\n  }\n  return (\n    <section>\n      <div className='showQuestion-box'>\n        <div className='showQuestion'>\n          {parse(question)}\n        </div>\n        <button onClick={() => handleQuestion()} className='study-btn'>Show Answer</button>\n      </div>\n      <button className='edit-btn' onClick={() => handleEdit(id)}>Edit</button>\n    </section>\n  )\n}\n\nexport default Question\n","import React from 'react'\nimport parse from 'html-react-parser'\nimport url from '../../url/config'\nimport { getSession } from '../../util'\nimport { fetchPost } from '../../fetch'\n\nfunction Answer ({ cards, onAgainAns, onEasyOrGood, onEdit, onNetErr }) {\n  const sid = getSession().sid\n\n  const ConvertSec = n => {\n    const time = []\n    const day = parseInt(n / (24 * 3600))\n    if (day) time.push(` ${day} d`)\n    n = (n % (24 * 3600))\n    const hour = parseInt(n / 3600)\n    if (hour) time.push(` ${hour} hour`)\n    n = parseInt(n % 3600)\n    const min = parseInt(n / 60)\n    if (min) time.push(` ${min} min`)\n    n = parseInt(n % 60)\n    const sec = n\n    if (sec) time.push(sec + 'sec')\n    return time\n  }\n\n  const fetchReq = async (url, card) => {\n    const response = await fetchPost(url, card)\n    if (response.err) {\n      onNetErr(true)\n    }\n  }\n\n  const handleAgain = array => {\n    let { id, status, again, easy, good } = array\n    status = 'learning'\n    easy = 86400 // 1 day\n    good = 259200 // 3 day\n\n    const timeStamp = parseInt(Date.now() / 1000)\n\n    fetchReq(`${url}/updateTimeStamp`,\n      { id, again, easy, good, timeStamp, status, sid })\n\n    onAgainAns({ type: 'againAnswer', newArr: [...cards.slice(1), cards[0]] })\n  }\n\n  const handleEasyOrGood = (data, e) => {\n    const answerType = e.target.innerText.toLowerCase()\n    let { id, status, easy, good, again } = data\n    const timeToDelay = data[answerType]\n    const oldStatus = status\n\n    if (oldStatus === 'new') {\n      status = 'learning'\n      easy = 86400 // 1 day\n      good = 259200 // 3 days\n    }\n\n    if (oldStatus === 'learning') {\n      status = 'review'\n      easy = 172800 // 2 days\n      good = 345600 // 4 days\n    }\n\n    if (oldStatus === 'review') {\n      easy = Number(easy) + 172800\n      good = Number(good) + 345600\n    }\n\n    const timeStamp = parseInt(Date.now() / 1000) + Number(timeToDelay)\n\n    fetchReq(`${url}/updateTimeStamp`,\n      { id, again, easy, good, timeStamp, status, sid })\n\n    onEasyOrGood({ type: `${answerType}Answer`, newArr: cards.slice(1) })\n  }\n\n  const handleEdit = id => {\n    onEdit(id)\n  }\n\n  return (\n    <section>\n      <div className='showAnswer-box'>\n        <div className='showAnswer'>\n          {parse(cards[0].answer)}\n        </div>\n        <div className='timings'>\n          <label>&lt; {ConvertSec(cards[0].again)}</label>\n          <label>  {ConvertSec(cards[0].easy)}</label>\n          <label>{ConvertSec(cards[0].good)}</label>\n        </div>\n        <div className='answer-btns'>\n          <button onClick={() => handleAgain(cards[0])} className='btn'>Again</button>\n          <button onClick={(e) => handleEasyOrGood(cards[0], e)} className='btn'>Easy</button>\n          <button onClick={(e) => handleEasyOrGood(cards[0], e)} className='btn'>Good</button>\n        </div>\n      </div>\n      <button className='edit-btn' onClick={() => handleEdit(cards[0].id)}>Edit</button>\n    </section>\n  )\n}\n\nexport default Answer\n","import React, { useEffect, useReducer } from 'react'\nimport { useParams, Redirect } from 'react-router-dom'\nimport NavBar from '../Navbar/Navbar'\nimport url from '../../url/config'\nimport Question from './Question'\nimport Answer from './Answer'\nimport { getSession } from '../../util'\nimport NetworkErr from '../NetworkError'\n\nconst initialState = {\n  arr: [],\n  showStudy: true,\n  showQuestion: false,\n  showAnswer: false,\n  edit: false,\n  editId: '',\n  newCards: [],\n  learningCards: [],\n  reviewCards: [],\n  netErr: false\n}\n\nfunction reducer (state, action) {\n  switch (action.type) {\n    case 'setArr':\n      return {\n        ...state,\n        arr: [...action.newArr],\n        newCards: [...action.newCards],\n        learningCards: [...action.learningCards],\n        reviewCards: [...action.reviewCards]\n      }\n    case 'study':\n      return { ...state, showStudy: false, showQuestion: true }\n    case 'question':\n      return { ...state, showQuestion: false, showAnswer: true }\n    case 'answer' :\n      return { ...state, showQuestion: true, showAnswer: false }\n    case 'easyAnswer':\n      return { ...state, showQuestion: true, showAnswer: false, arr: [...action.newArr] }\n    case 'againAnswer':\n      return { ...state, showQuestion: true, showAnswer: false, arr: [...action.newArr] }\n    case 'goodAnswer':\n      return { ...state, showQuestion: true, showAnswer: false, arr: [...action.newArr] }\n    case 'edit' :\n      return { ...state, edit: true, editId: action.editId }\n    case 'netErr' :\n      return { ...state, netErr: true }\n    default: console.log('Unexpected action')\n  }\n}\n\nfunction Deck () {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { id: deckName } = useParams()\n  let studyDiv, congratsMsg\n  const session = getSession()\n  const sid = session.sid\n\n  async function getDataFromDb () {\n    const data = await window.fetch(`${url}/getCards/?sid=${sid}`)\n    const res = await data.json()\n    const res1 = res.filter(item => item.deck === deckName)\n    const res2 = res1.reduce((acc, cv) => {\n      if (Number(cv.deckclicktime) >= Number(cv.timestamp)) {\n        acc.push(cv)\n      }\n      return acc\n    }, [])\n    const newCards = res2.filter(item => item.status === 'new')\n    const learningCards = res2.filter(item => item.status === 'learning')\n    const reviewCards = res2.filter(item => item.status === 'review')\n    dispatch({ type: 'setArr', newArr: res2, newCards: newCards, learningCards: learningCards, reviewCards: reviewCards })\n  }\n\n  useEffect(() => {\n    getDataFromDb()\n  }, [])\n\n  function handleStudy (value) {\n    dispatch(value)\n  }\n\n  function handleNetErr (value) {\n    dispatch(value)\n  }\n\n  if (state.showStudy) {\n    studyDiv = (\n      <main className='study-box'>\n        <h1 className='heading'>{deckName.toUpperCase()}</h1>\n        <section className='details'>\n          <div className='count'>\n            <label>New</label>\n            <label>{state.newCards.length}</label>\n          </div>\n          <div className='count'>\n            <label>In Learning</label>\n            <label>{state.learningCards.length}</label>\n          </div>\n          <div className='count'>\n            <label>To Review</label>\n            <label>{state.reviewCards.length}</label>\n          </div>\n        </section>\n        <button onClick={() => handleStudy({ type: 'study' })} className='study-btn'>Study Now</button>\n      </main>)\n  }\n\n  if (!state.arr.length) {\n    congratsMsg = <p className='congrats-msg'>Congratulations ! You have finished this deck for now</p>\n  }\n\n  return (\n    <>\n      {state.netErr && <NetworkErr />}\n      {!state.netErr &&\n        <main className='main'>\n          <NavBar />\n\n          {studyDiv || congratsMsg}\n\n          {state.edit &&\n            <Redirect to={`/edit/${state.editId}`} />}\n\n          {state.showQuestion && state.arr.length &&\n            <Question\n              question={state.arr[0].question}\n              id={state.arr[0].id}\n              onQuestion={() => handleStudy({ type: 'question' })}\n              onEdit={id => handleStudy({ type: 'edit', editId: id })}\n            />}\n\n          {state.showAnswer && state.arr.length &&\n            <Answer\n              cards={state.arr}\n              onAgainAns={card => handleStudy(card)}\n              onEasyOrGood={card => handleStudy(card)}\n              onEdit={id => handleStudy({ type: 'edit', editId: id })}\n              onNetErr={val => handleNetErr({ type: 'netErr' })}\n            />}\n\n        </main>}\n    </>\n  )\n}\n\nexport default Deck\n","import React, { useState, useEffect } from 'react'\nimport EditCard from '../Add/AddCard'\nimport { useParams } from 'react-router-dom'\nimport NavBar from '../Navbar/Navbar'\nimport url from '../../url/config'\nimport { getSession } from '../../util'\nimport { fetchGet } from '../../fetch'\nimport NetworkErr from '../NetworkError'\n\nfunction Edit () {\n  const session = getSession()\n  const sid = session.sid\n  const { id } = useParams()\n  const [editCard, setEditCard] = useState('')\n  const [netErr, setNetErr] = useState(false)\n\n  async function deckNames () {\n    const response = await fetchGet(`${url}/getCards/?sid=${sid}`)\n    if (response.err) {\n      setNetErr(true)\n    } else {\n      const data = await response.json()\n      const card = data.filter(item => item.id === Number(id))\n      setEditCard(card)\n    }\n  }\n\n  useEffect(() => {\n    deckNames()\n  }, [])\n\n  return (\n    <>\n      {netErr && <NetworkErr />}\n      {!netErr &&\n        <main>\n          <NavBar />\n          {editCard &&\n            <EditCard heading='Edit card' id={id} editCard={editCard} />}\n        </main>}\n    </>\n  )\n}\n\nexport default Edit\n","import React from 'react'\nimport styled from 'styled-components'\n\nfunction NotFound () {\n  const Heading = styled.p`\n    text-align: center;\n    margin-top: 100px;\n    font-size: 30px;\n`\n  return (\n    <Heading>Page Not Found</Heading>\n  )\n}\n\nexport default NotFound\n","import React from 'react'\nimport About from './About/About'\nimport SignUp from './SignUp/SignUp'\nimport Login from './Login/Login'\nimport Decks from './Decks/Decks'\nimport Add from './Add/Add'\nimport Deck from './Decks/Deck'\nimport Edit from './Edit/Edit'\nimport NotFound from './NotFound'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction routes () {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/' component={About} />\n        <Route exact path='/signup' component={SignUp} />\n        <Route exact path='/login' component={Login} />\n        <Route exact path='/decks' component={Decks} />\n        <Route exact path='/add' component={Add} />\n        <Route exact path='/decks/:id' component={Deck} />\n        <Route exact path='/edit/:id' component={Edit} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  )\n}\nexport default routes\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Routes from './components/Routes'\nimport './index.css'\n\nReactDOM.render(<Routes />, document.getElementById('root'))\n"],"sourceRoot":""}